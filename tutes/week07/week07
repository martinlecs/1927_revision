// Answers to week07 tutes

6. 

a) Path:

Smallest: Any path with a single edge incident to two adjacent vertices
e.g. a-j or g-m
Largest: The path including all vertices e.g.
m-g-h-i-k-j-a-b-d-f-c-e

b) Cycle: a path where the last vertex in the path is also the same as
the first vertex

Smallest: j-k-i-j or i-k-h-i or b-d-f-b etc. 
Largest: g-h-k-i-j-a-b-c-d-e-f-g

c) Spanning Tree: tree(no cycles) containing all vertices

There is no smallest or largest spanning tree as it must contain all
vertices.

d)any complete subgraph (there is an edge from each vertex to every
other vertex)

7. 

a) Adjacency Matrix (V*V 2D array)

nV = 6
nE = 6

    0 1 2 3 4 5 
0   0 1 1 0 0 0
1   1 0 0 1 0 0
2   1 0 0 1 1 0
3   0 1 1 0 0 0
4   0 0 1 0 0 1
5   0 0 0 0 1 0

b) Adjacency List

Array of lists: List *edges

nV = 6
nE = 6

0: 1->2
1: 0->3
2: 0->3->4
3: 1->2
4: 2->5
5: 4

9. See /code/

10. The adjacency matrix representation always requires V*V matrix,
regardless of the number or edges, where each element is 1 byte long. It
also requires an array of V pointers. This gives a fixed size of V*4+V^2
bytes.

The adjacency list representation requires an array of V pointers (the
start of each list) with each being 4 bytes long, and then one list node
for each edge in each list. The total number of edges is 2E (each
edge(v,w) is stored twice, once in the list for v and once in the list
for w). Since each node requires 8 bytes (vertex+pointer), this gives a
size of V*4+8*2*E. The total storage ius this V*$+16*E.

See tute for more details
So its V^2 vs 16*E

11. See /code/

14.

depthFirst(g,0): 01234567
depthFirst(g,3): 31025674
