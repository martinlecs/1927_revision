Week 2 Tutorial Answers

1. 
user: the number of cpu seconds spent executing the program code
system: the number of cpu seconds spent executing system functions on behalf 
of the the program (examples would include I/O)
elapsed: the amount of (wall-clock) time between when the process started, and when it finished
%CPU: how much usage of the CPU the program got while executing; your program will never be the only process running on a modern computer system; you would typically observe that elapsed ~= (user+system)*100/%CPU

2.
a) 4*3*5 = 60 times
b) Randomly ordered numbers from 1..Max (specified by user in arguments)
   Sorted numbers from 1..Max
   Reverse sorted from Max..1
c) into a log file
d) The line cat/dev/null > log creates an initially empty file. Reading from dev/null/ always gives empty input.
e) The line echo "" >> log appens an empty line to the log file, after each set of 5 runs for a given size and order combination.

3.
a) For n = 10, time(f(n)) = 1000, time(g(n)) = 200
b) For n = 20, time(f(n)) = 2000, time(g(n)) = 800
c) As above
d) As above
e) Crossover occurs when time(f(n)) = time(g(n)), ie. when 100n = 2n^2
    => n = 50.

4.

a) There are n iterations of the while loop. There will always be n comparisons before finding the value. => O(n) time-complexity
b) Max number of iterations through the loop is n times. The loop terminate once the value is found. Besst case: val occurs as the first element of the array and only one cmp takes place. Worst Case: val does not occur or is the last element in the array. So there are n cmp. Average case: val occurs somewhere in the middle so there is on average n/2 cmp. So worst case O(n).
c) Binary search: It is critical for this function that the array is sorted. The function first checks the middle element. If val is less than this, the function restricts its search to the lower half of the array. If val is greater than the middle value, the function restricts its search to the upper half of the array. If the middle element is val, the function returns true.

On each iteration, the function eliminates half of the array from consideration. How many times can you do this before you reach a single element? The answer is log2n times. Note that this is the worst case, we might discover val before we have reduced the part of the array being considered to a single element.

Since we ignore constants in quoting algorithmic complexity, so we normally quote the complexity of binary search as O(logN).

5.

These two functions are essentially the same:

void sort(int a[], int lo, int hi)
void sort(int *a, int lo, int hi)

Arrays are manipulated by a pointer to their first element. The first declaration says "a is an array of ints", with the implication being that a pointer to the first element in the array will be passed to the function and the array will be manipulated via that pointer. The second declaration says "a is a pointer to an int". This doesn't necessarily mean that it is a pointer to an array of ints; it may be a pointer to a single int object that is not in an array. In both cases, a pointer to an int is passed to the function; the first declaration is simply more explicit about its intention to use this pointer as the first element in an array.

Both functions would be invoked in the same way, and this could be either of:

sort(numbers, 10, 20);
// or...
sort(&numbers[0], 10, 20);


6.

a) Parameters are passed by value in C, and the parementers that we
passed into the function can be considered to be local variables that
are intialised at the time the function is called. So the swap function
will simply change the values of objects that are local to the function
and all effects will be lost once the function exists. 

The macro function works because the swapping statements are inserted
into any function that uses the macro (no function being called, just
snippet code being inserted) and so the effects take place within the
local environment.

b) We can write an appropriate function that swaps two variables by
passing their pointers into the function rather than their values. See
/code/

c) See /code/

7.

For a[5] = {3,1,4,5,2}

a) Bubble Sort

31452 START
13425
13245
12345 
12345 END (Final Pass)

b) Selection Sort

31452 START
13452
12453
12354
12345 END

c) Quick Sort (pivot = a[0])

Pivot = 3

31452 START
213????
???
??
MAGIC

8. Implement Bucket Sort

9. See /code/


